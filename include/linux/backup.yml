# https://github.com/gantsign/ansible_role_backup? Rsync
# Maid & Joshua hebben een Rsync script die (half) werkt
# SLA = 1 december

- name: create backup directory if it doesn't exist
- name: Create a backup directory
  file:
    path: "{{ backup_dir }}"
    path: /etc/backup
    state: directory
  delegate_to: "{{ inventory_hostname }}"
  delegate_to: localhost

- name: Take a backup of nginx conf file
  synchronize:
    src: "/etc/nginx/site-enabled/"
    dest: "{{ backup_dir }}/nginx_conf_backup/"
  delegate_to: "{{ inventory_hostname }}"

# Backup the sh script file in every server
- name: check if demo.sh file exists
  stat:
    path: "/home/scripts/demo.sh"
  register: script_file
  ignore_errors: yes

- name: Take backup of demo.sh script
  synchronize:
    src: "/home/scripts/demo.sh"
    dest: "{{ backup_dir }}/demo_script_backup/"
  delegate_to: "{{ inventory_hostname }}"
  when: script_file.stat.exists == true

# Backup the crontab in every server
- name: Backup crontab
  become: true
  become_user: chirag
  shell: "crontab -l > {{ crontab_file }}"
  register: crontab_output
  changed_when: false
  delegate_to: "{{ inventory_hostname }}"
  when: inventory_hostname in groups['web_servers']

- name: Copy crontab backup file to backup directory
  become: true
  synchronize:
    src: "{{ crontab_file }}"
    dest: "{{ backup_dir }}/crontab.txt.{{ inventory_hostname }}"
  when: crontab_output.stdout != "" and inventory_hostname in groups['web_servers']

- name: Remove crontab backup file from tmp directory
  become: true
  file:
    path: "{{ crontab_file }}"
    state: absent
  when: crontab_output.stdout != "" and inventory_hostname in groups['web_servers']

- name: Move file to backup directory
  command: mv "/home/{{ crontab_file }}" "{{ backup_dir }}/"

# Create a tar file of the backup directory
- name: create tar file of backup directory
  achive:
    path: "{{ backup_dir }}"
    dest: "/home/backup/{{ inventory_hostname }}.tar.gz"
    format: gz
    delegate_to: "{{ inventory_hostname }}"

# Transfer tar file to server1
- name: get tar file from multiple servers and store in server1
  fetch:
    src: "/home/backup/{{ inventory_hostname }}.tar.gz"
    dest: "/home/ALL_Backup/"
    flat: yes
    remote_src: yes
    ignore_errors: true

- name: Transfer tar file to server1
  copy:
    src: "/home/backup/{{ inventory_hostname }}.tar.gz"
    dest: "/home/ALL_Backup/"
    remote_src: yes

- name: Set tar file permissions
  file:
    path: "/home/ALL_Backup/{{ inventory_hostname }}.tar.gz"
    mode: "0644"
  when: tarfile.stat.exists

# Print completion messages
- name: Print completion
  debug:
    msg: "ok its done"

- name: Print the completion message on a particular server
  debug:
    msg: "ok its done in server2"
  delegate_to: "{{ inventory_hostname }}"
  when:
    - script_file.stat.exists == true
    - inventory_hostname == 'server2'
- name: Perform a backup using rsync
  command: rsync -av --delete / /etc/backup/
  delegate_to: localhost
